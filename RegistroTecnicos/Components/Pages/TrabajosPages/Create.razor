@page "/Trabajos/create"
@inject TrabajosService TrabajosService
@inject ClientesServices ClientesServices
@inject TecnicoService TecnicoService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<EditForm Model="Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Trabajos</h3>
        </div>

        <div class="card-body">

            @* TrabajoId *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajoId" class="form-label">TrabajoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Trabajo.TrabajoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Fecha)" />
            </div>

            @* ClienteId (Cargar desde Clientes) *@
            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente:</label>
                <InputSelect @bind-Value="Trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in ListaClientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.ClienteId)" />
            </div>

            @* TecnicoId (Cargar desde Tecnicos) *@
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico:</label>
                <InputSelect @bind-Value="Trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un técnico</option>
                    @foreach (var tecnico in ListaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.TecnicoId)" />
            </div>

            @* Descripcion *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Descripcion)" />
            </div>



            @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Monto)" />
            </div>
        </div>


        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Trabajos/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

    @code {
        [Parameter]
        public int TrabajoId { get; set; }

        public Trabajos Trabajo { get; set; } = new Trabajos();
        public List<Trabajos> Trabajos { get; set; } = new List<Trabajos>();
        public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
        public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
        private bool Existe = false;

        protected override async Task OnInitializedAsync()
        {
            // Cargar la fecha actual al inicializar el formulario
            Trabajo.Fecha = DateTime.Now;

            // Cargar las listas de clientes y técnicos
            ListaClientes = await ClientesServices.ObtenerListaClientes();
            ListaTecnicos = await TecnicoService.ObtenerListaTecnicos();
        }

        public void Nuevo()
        {
            Trabajo = new Trabajos();
            Trabajo.Fecha = DateTime.Now; // Establecer fecha actual al crear un nuevo trabajo
            Existe = false;
        }

        public async Task Buscar()
        {
            Existe = false;
            var TrabajoEncontrado = await TrabajosService.Buscar(Trabajo.TrabajoId);

            if (TrabajoEncontrado != null)
            {
                Trabajo = TrabajoEncontrado;
            }
            else
            {
                Nuevo();
            }
        }

        public async Task<bool> Validar()
        {
            Existe = await TrabajosService.Existe(Trabajo.TrabajoId);
            return !Existe;
        }

        public async Task Guardar()
        {
            if (!await Validar())
            {
                return;
            }

            var guardo = await TrabajosService.Guardar(Trabajo);
            if (guardo)
            {
                Nuevo();
            }
        }

        public async Task Eliminar()
        {
            var eliminado = await TrabajosService.Eliminar(Trabajo.TrabajoId);
            Nuevo();
        }
    }