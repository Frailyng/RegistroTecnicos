@page "/Trabajos/Create"
@inject TrabajosService TrabajosService
@inject ClientesServices ClientesServices
@inject TecnicoService TecnicoService
@inject PrioridadesService PrioridadesService // Inyectar el servicio de prioridades
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<EditForm Model="Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><i class="fas fa-clipboard-list"></i> Registro de Trabajos</h3>
        </div>

        <div class="card-body">
            <!-- Fecha -->
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Fecha)" />
            </div>

            <!-- ClienteId (Cargar desde Clientes) -->
            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente:</label>
                <InputSelect @bind-Value="Trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in ListaClientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.ClienteId)" />
            </div>

            <!-- TecnicoId (Cargar desde Técnicos) -->
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico:</label>
                <InputSelect @bind-Value="Trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un técnico</option>
                    @foreach (var tecnico in ListaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.TecnicoId)" />
            </div>

            <!-- Descripción -->
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="Trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Descripcion)" />
            </div>

            <!-- Monto -->
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Monto)" />
            </div>

            <!-- Prioridad (Cargar desde Prioridades) -->
            <div class="mb-3">
                <label for="PrioridadId" class="form-label">Prioridad:</label>
                <InputSelect @bind-Value="Trabajo.PrioridadId" class="form-control">
                    <option value="">Seleccione una prioridad</option>
                    @foreach (var prioridad in ListaPrioridades)
                    {
                        <option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.PrioridadId)" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Guardar</button>
                <a href="/Trabajos/Index" class="btn btn-secondary">Cancelar</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Trabajos Trabajo = new Trabajos();
    private List<Clientes> ListaClientes = new List<Clientes>();
    private List<Tecnicos> ListaTecnicos = new List<Tecnicos>();
    private List<Prioridades> ListaPrioridades = new List<Prioridades>();

    protected override async Task OnInitializedAsync()
    {
        // Asignar la fecha actual
        Trabajo.Fecha = DateTime.Today;

        ListaClientes = await ClientesServices.ObtenerListaClientes();
        ListaTecnicos = await TecnicoService.ObtenerListaTecnicos();
        ListaPrioridades = await PrioridadesService.ObtenerListaPrioridades(); 
    }

    private async Task Guardar()
    {
        var result = await TrabajosService.Guardar(Trabajo);
        if (result)
        {
            NavigationManager.NavigateTo("/Trabajos/Index");
        }
        else
        {
            // Aquí puedes manejar errores si ocurre algún problema al guardar
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el trabajo");
        }
    }
}
