@page "/Trabajos/Edit/{TrabajoId:int}"
@inject TrabajosService TrabajosService
@inject ClientesServices ClientesService
@inject TecnicoService TecnicoService
@inject NavigationManager NavigationManager

<EditForm Model="Trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><i class="fas fa-clipboard-list"></i> Editar Trabajo</h3>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajoId" class="form-label">TrabajoId:</label>
                    <InputNumber @bind-Value="Trabajo.TrabajoId" class="form-control" style="font-size: 0.8em;" readonly />
                </div>
            </div>

            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="Trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Descripcion)" />
            </div>

            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Fecha)" />
            </div>

            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Trabajo.Monto)" />
            </div>

            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente:</label>
                <InputSelect @bind-Value="Trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un Cliente</option>
                    @foreach (var cliente in ListaClientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.ClienteId)" />
            </div>

            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico:</label>
                <InputSelect @bind-Value="Trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un Técnico</option>
                    @foreach (var tecnico in ListaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Trabajo.TecnicoId)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Trabajos/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? TrabajoId { get; set; }

    public Trabajos Trabajo { get; set; } = new Trabajos();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        // Cargar la lista de Clientes y Técnicos
        ListaClientes = await ClientesService.ObtenerListaClientes();
        ListaTecnicos = await TecnicoService.Listar(t => true);

        if (TrabajoId.HasValue)
        {
            Trabajo.TrabajoId = TrabajoId.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        Trabajo = new Trabajos();
    }

    public async Task Buscar()
    {
        var trabajoEncontrado = await TrabajosService.Buscar(Trabajo.TrabajoId);

        if (trabajoEncontrado != null)
        {
            Trabajo = trabajoEncontrado;
        }
    }

    public async Task Guardar()
    {
        var guardo = await TrabajosService.Guardar(Trabajo);
        if (guardo)
        {
            Nuevo();
            NavigationManager.NavigateTo("/Trabajos/Index");
        }
    }
}
